//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace Facility.Reports.FacilityReportsService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.fgi.org/", ConfigurationName="FacilityReportsService.FacilityReportsServiceSoap")]
    public interface FacilityReportsServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.fgi.org/GetFacilityPatientsCostPerMonth", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFacilityPatientsCostPerMonth(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState);
        
        Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityPatientsCostPerMonth(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.fgi.org/GetFacilityAvgCD4CostPerPatient", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFacilityAvgCD4CostPerPatient(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState);
        
        Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityAvgCD4CostPerPatient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.fgi.org/GetFacilityAvgExcludingCD4CostPerPatient", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFacilityAvgExcludingCD4CostPerPatient(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState);
        
        Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityAvgExcludingCD4CostPerPatient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.fgi.org/GetFacilityTotalAvgCostofARVandOIPerPatientPerMonth", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFacilityTotalAvgCostofARVandOIPerPatientPerMonth(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState);
        
        Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityTotalAvgCostofARVandOIPerPatientPerMonth(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.fgi.org/GetFacilityCumulAvgCostofARVandOIPerPatientPerMonth", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFacilityCumulAvgCostofARVandOIPerPatientPerMonth(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState);
        
        Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityCumulAvgCostofARVandOIPerPatientPerMonth(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.fgi.org/GetFacilityTotalCostLostToFollowup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFacilityTotalCostLostToFollowup(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState);
        
        Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityTotalCostLostToFollowup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.fgi.org/GetFacilityCumTotalCostLostToFollowup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFacilityCumTotalCostLostToFollowup(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState);
        
        Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityCumTotalCostLostToFollowup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.fgi.org/GetFacilityAvgCostCovByProgramAndPatient", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFacilityAvgCostCovByProgramAndPatient(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState);
        
        Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityAvgCostCovByProgramAndPatient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.fgi.org/GetFacilityCumCostCovByProgramAndPatient", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFacilityCumCostCovByProgramAndPatient(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState);
        
        Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityCumCostCovByProgramAndPatient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.fgi.org/GetPatientDebitNoteTotalCostByMonth", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetPatientDebitNoteTotalCostByMonth(int PatientId, System.AsyncCallback callback, object asyncState);
        
        Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetPatientDebitNoteTotalCostByMonth(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FacilityReportsServiceSoapChannel : Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacilityPatientsCostPerMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacilityPatientsCostPerMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Facility.Reports.FacilityReportsService.ArrayOfXElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacilityAvgCD4CostPerPatientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacilityAvgCD4CostPerPatientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Facility.Reports.FacilityReportsService.ArrayOfXElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacilityAvgExcludingCD4CostPerPatientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacilityAvgExcludingCD4CostPerPatientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Facility.Reports.FacilityReportsService.ArrayOfXElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacilityTotalAvgCostofARVandOIPerPatientPerMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacilityTotalAvgCostofARVandOIPerPatientPerMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Facility.Reports.FacilityReportsService.ArrayOfXElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacilityCumulAvgCostofARVandOIPerPatientPerMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacilityCumulAvgCostofARVandOIPerPatientPerMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Facility.Reports.FacilityReportsService.ArrayOfXElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacilityTotalCostLostToFollowupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacilityTotalCostLostToFollowupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Facility.Reports.FacilityReportsService.ArrayOfXElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacilityCumTotalCostLostToFollowupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacilityCumTotalCostLostToFollowupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Facility.Reports.FacilityReportsService.ArrayOfXElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacilityAvgCostCovByProgramAndPatientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacilityAvgCostCovByProgramAndPatientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Facility.Reports.FacilityReportsService.ArrayOfXElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFacilityCumCostCovByProgramAndPatientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFacilityCumCostCovByProgramAndPatientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Facility.Reports.FacilityReportsService.ArrayOfXElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPatientDebitNoteTotalCostByMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPatientDebitNoteTotalCostByMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Facility.Reports.FacilityReportsService.ArrayOfXElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FacilityReportsServiceSoapClient : System.ServiceModel.ClientBase<Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap>, Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap {
        
        private BeginOperationDelegate onBeginGetFacilityPatientsCostPerMonthDelegate;
        
        private EndOperationDelegate onEndGetFacilityPatientsCostPerMonthDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacilityPatientsCostPerMonthCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFacilityAvgCD4CostPerPatientDelegate;
        
        private EndOperationDelegate onEndGetFacilityAvgCD4CostPerPatientDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacilityAvgCD4CostPerPatientCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFacilityAvgExcludingCD4CostPerPatientDelegate;
        
        private EndOperationDelegate onEndGetFacilityAvgExcludingCD4CostPerPatientDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacilityAvgExcludingCD4CostPerPatientCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFacilityTotalAvgCostofARVandOIPerPatientPerMonthDelegate;
        
        private EndOperationDelegate onEndGetFacilityTotalAvgCostofARVandOIPerPatientPerMonthDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacilityTotalAvgCostofARVandOIPerPatientPerMonthCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFacilityCumulAvgCostofARVandOIPerPatientPerMonthDelegate;
        
        private EndOperationDelegate onEndGetFacilityCumulAvgCostofARVandOIPerPatientPerMonthDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacilityCumulAvgCostofARVandOIPerPatientPerMonthCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFacilityTotalCostLostToFollowupDelegate;
        
        private EndOperationDelegate onEndGetFacilityTotalCostLostToFollowupDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacilityTotalCostLostToFollowupCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFacilityCumTotalCostLostToFollowupDelegate;
        
        private EndOperationDelegate onEndGetFacilityCumTotalCostLostToFollowupDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacilityCumTotalCostLostToFollowupCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFacilityAvgCostCovByProgramAndPatientDelegate;
        
        private EndOperationDelegate onEndGetFacilityAvgCostCovByProgramAndPatientDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacilityAvgCostCovByProgramAndPatientCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFacilityCumCostCovByProgramAndPatientDelegate;
        
        private EndOperationDelegate onEndGetFacilityCumCostCovByProgramAndPatientDelegate;
        
        private System.Threading.SendOrPostCallback onGetFacilityCumCostCovByProgramAndPatientCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPatientDebitNoteTotalCostByMonthDelegate;
        
        private EndOperationDelegate onEndGetPatientDebitNoteTotalCostByMonthDelegate;
        
        private System.Threading.SendOrPostCallback onGetPatientDebitNoteTotalCostByMonthCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FacilityReportsServiceSoapClient() {
        }
        
        public FacilityReportsServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FacilityReportsServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FacilityReportsServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FacilityReportsServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetFacilityPatientsCostPerMonthCompletedEventArgs> GetFacilityPatientsCostPerMonthCompleted;
        
        public event System.EventHandler<GetFacilityAvgCD4CostPerPatientCompletedEventArgs> GetFacilityAvgCD4CostPerPatientCompleted;
        
        public event System.EventHandler<GetFacilityAvgExcludingCD4CostPerPatientCompletedEventArgs> GetFacilityAvgExcludingCD4CostPerPatientCompleted;
        
        public event System.EventHandler<GetFacilityTotalAvgCostofARVandOIPerPatientPerMonthCompletedEventArgs> GetFacilityTotalAvgCostofARVandOIPerPatientPerMonthCompleted;
        
        public event System.EventHandler<GetFacilityCumulAvgCostofARVandOIPerPatientPerMonthCompletedEventArgs> GetFacilityCumulAvgCostofARVandOIPerPatientPerMonthCompleted;
        
        public event System.EventHandler<GetFacilityTotalCostLostToFollowupCompletedEventArgs> GetFacilityTotalCostLostToFollowupCompleted;
        
        public event System.EventHandler<GetFacilityCumTotalCostLostToFollowupCompletedEventArgs> GetFacilityCumTotalCostLostToFollowupCompleted;
        
        public event System.EventHandler<GetFacilityAvgCostCovByProgramAndPatientCompletedEventArgs> GetFacilityAvgCostCovByProgramAndPatientCompleted;
        
        public event System.EventHandler<GetFacilityCumCostCovByProgramAndPatientCompletedEventArgs> GetFacilityCumCostCovByProgramAndPatientCompleted;
        
        public event System.EventHandler<GetPatientDebitNoteTotalCostByMonthCompletedEventArgs> GetPatientDebitNoteTotalCostByMonthCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.BeginGetFacilityPatientsCostPerMonth(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFacilityPatientsCostPerMonth(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Facility.Reports.FacilityReportsService.ArrayOfXElement Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.EndGetFacilityPatientsCostPerMonth(System.IAsyncResult result) {
            return base.Channel.EndGetFacilityPatientsCostPerMonth(result);
        }
        
        private System.IAsyncResult OnBeginGetFacilityPatientsCostPerMonth(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime TransactionStartDate = ((System.DateTime)(inValues[0]));
            System.DateTime TransactionEndDate = ((System.DateTime)(inValues[1]));
            return ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).BeginGetFacilityPatientsCostPerMonth(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        private object[] OnEndGetFacilityPatientsCostPerMonth(System.IAsyncResult result) {
            Facility.Reports.FacilityReportsService.ArrayOfXElement retVal = ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).EndGetFacilityPatientsCostPerMonth(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacilityPatientsCostPerMonthCompleted(object state) {
            if ((this.GetFacilityPatientsCostPerMonthCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacilityPatientsCostPerMonthCompleted(this, new GetFacilityPatientsCostPerMonthCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacilityPatientsCostPerMonthAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate) {
            this.GetFacilityPatientsCostPerMonthAsync(TransactionStartDate, TransactionEndDate, null);
        }
        
        public void GetFacilityPatientsCostPerMonthAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, object userState) {
            if ((this.onBeginGetFacilityPatientsCostPerMonthDelegate == null)) {
                this.onBeginGetFacilityPatientsCostPerMonthDelegate = new BeginOperationDelegate(this.OnBeginGetFacilityPatientsCostPerMonth);
            }
            if ((this.onEndGetFacilityPatientsCostPerMonthDelegate == null)) {
                this.onEndGetFacilityPatientsCostPerMonthDelegate = new EndOperationDelegate(this.OnEndGetFacilityPatientsCostPerMonth);
            }
            if ((this.onGetFacilityPatientsCostPerMonthCompletedDelegate == null)) {
                this.onGetFacilityPatientsCostPerMonthCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacilityPatientsCostPerMonthCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacilityPatientsCostPerMonthDelegate, new object[] {
                        TransactionStartDate,
                        TransactionEndDate}, this.onEndGetFacilityPatientsCostPerMonthDelegate, this.onGetFacilityPatientsCostPerMonthCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.BeginGetFacilityAvgCD4CostPerPatient(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFacilityAvgCD4CostPerPatient(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Facility.Reports.FacilityReportsService.ArrayOfXElement Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.EndGetFacilityAvgCD4CostPerPatient(System.IAsyncResult result) {
            return base.Channel.EndGetFacilityAvgCD4CostPerPatient(result);
        }
        
        private System.IAsyncResult OnBeginGetFacilityAvgCD4CostPerPatient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime TransactionStartDate = ((System.DateTime)(inValues[0]));
            System.DateTime TransactionEndDate = ((System.DateTime)(inValues[1]));
            return ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).BeginGetFacilityAvgCD4CostPerPatient(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        private object[] OnEndGetFacilityAvgCD4CostPerPatient(System.IAsyncResult result) {
            Facility.Reports.FacilityReportsService.ArrayOfXElement retVal = ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).EndGetFacilityAvgCD4CostPerPatient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacilityAvgCD4CostPerPatientCompleted(object state) {
            if ((this.GetFacilityAvgCD4CostPerPatientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacilityAvgCD4CostPerPatientCompleted(this, new GetFacilityAvgCD4CostPerPatientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacilityAvgCD4CostPerPatientAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate) {
            this.GetFacilityAvgCD4CostPerPatientAsync(TransactionStartDate, TransactionEndDate, null);
        }
        
        public void GetFacilityAvgCD4CostPerPatientAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, object userState) {
            if ((this.onBeginGetFacilityAvgCD4CostPerPatientDelegate == null)) {
                this.onBeginGetFacilityAvgCD4CostPerPatientDelegate = new BeginOperationDelegate(this.OnBeginGetFacilityAvgCD4CostPerPatient);
            }
            if ((this.onEndGetFacilityAvgCD4CostPerPatientDelegate == null)) {
                this.onEndGetFacilityAvgCD4CostPerPatientDelegate = new EndOperationDelegate(this.OnEndGetFacilityAvgCD4CostPerPatient);
            }
            if ((this.onGetFacilityAvgCD4CostPerPatientCompletedDelegate == null)) {
                this.onGetFacilityAvgCD4CostPerPatientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacilityAvgCD4CostPerPatientCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacilityAvgCD4CostPerPatientDelegate, new object[] {
                        TransactionStartDate,
                        TransactionEndDate}, this.onEndGetFacilityAvgCD4CostPerPatientDelegate, this.onGetFacilityAvgCD4CostPerPatientCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.BeginGetFacilityAvgExcludingCD4CostPerPatient(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFacilityAvgExcludingCD4CostPerPatient(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Facility.Reports.FacilityReportsService.ArrayOfXElement Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.EndGetFacilityAvgExcludingCD4CostPerPatient(System.IAsyncResult result) {
            return base.Channel.EndGetFacilityAvgExcludingCD4CostPerPatient(result);
        }
        
        private System.IAsyncResult OnBeginGetFacilityAvgExcludingCD4CostPerPatient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime TransactionStartDate = ((System.DateTime)(inValues[0]));
            System.DateTime TransactionEndDate = ((System.DateTime)(inValues[1]));
            return ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).BeginGetFacilityAvgExcludingCD4CostPerPatient(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        private object[] OnEndGetFacilityAvgExcludingCD4CostPerPatient(System.IAsyncResult result) {
            Facility.Reports.FacilityReportsService.ArrayOfXElement retVal = ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).EndGetFacilityAvgExcludingCD4CostPerPatient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacilityAvgExcludingCD4CostPerPatientCompleted(object state) {
            if ((this.GetFacilityAvgExcludingCD4CostPerPatientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacilityAvgExcludingCD4CostPerPatientCompleted(this, new GetFacilityAvgExcludingCD4CostPerPatientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacilityAvgExcludingCD4CostPerPatientAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate) {
            this.GetFacilityAvgExcludingCD4CostPerPatientAsync(TransactionStartDate, TransactionEndDate, null);
        }
        
        public void GetFacilityAvgExcludingCD4CostPerPatientAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, object userState) {
            if ((this.onBeginGetFacilityAvgExcludingCD4CostPerPatientDelegate == null)) {
                this.onBeginGetFacilityAvgExcludingCD4CostPerPatientDelegate = new BeginOperationDelegate(this.OnBeginGetFacilityAvgExcludingCD4CostPerPatient);
            }
            if ((this.onEndGetFacilityAvgExcludingCD4CostPerPatientDelegate == null)) {
                this.onEndGetFacilityAvgExcludingCD4CostPerPatientDelegate = new EndOperationDelegate(this.OnEndGetFacilityAvgExcludingCD4CostPerPatient);
            }
            if ((this.onGetFacilityAvgExcludingCD4CostPerPatientCompletedDelegate == null)) {
                this.onGetFacilityAvgExcludingCD4CostPerPatientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacilityAvgExcludingCD4CostPerPatientCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacilityAvgExcludingCD4CostPerPatientDelegate, new object[] {
                        TransactionStartDate,
                        TransactionEndDate}, this.onEndGetFacilityAvgExcludingCD4CostPerPatientDelegate, this.onGetFacilityAvgExcludingCD4CostPerPatientCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.BeginGetFacilityTotalAvgCostofARVandOIPerPatientPerMonth(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFacilityTotalAvgCostofARVandOIPerPatientPerMonth(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Facility.Reports.FacilityReportsService.ArrayOfXElement Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.EndGetFacilityTotalAvgCostofARVandOIPerPatientPerMonth(System.IAsyncResult result) {
            return base.Channel.EndGetFacilityTotalAvgCostofARVandOIPerPatientPerMonth(result);
        }
        
        private System.IAsyncResult OnBeginGetFacilityTotalAvgCostofARVandOIPerPatientPerMonth(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime TransactionStartDate = ((System.DateTime)(inValues[0]));
            System.DateTime TransactionEndDate = ((System.DateTime)(inValues[1]));
            return ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).BeginGetFacilityTotalAvgCostofARVandOIPerPatientPerMonth(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        private object[] OnEndGetFacilityTotalAvgCostofARVandOIPerPatientPerMonth(System.IAsyncResult result) {
            Facility.Reports.FacilityReportsService.ArrayOfXElement retVal = ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).EndGetFacilityTotalAvgCostofARVandOIPerPatientPerMonth(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacilityTotalAvgCostofARVandOIPerPatientPerMonthCompleted(object state) {
            if ((this.GetFacilityTotalAvgCostofARVandOIPerPatientPerMonthCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacilityTotalAvgCostofARVandOIPerPatientPerMonthCompleted(this, new GetFacilityTotalAvgCostofARVandOIPerPatientPerMonthCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacilityTotalAvgCostofARVandOIPerPatientPerMonthAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate) {
            this.GetFacilityTotalAvgCostofARVandOIPerPatientPerMonthAsync(TransactionStartDate, TransactionEndDate, null);
        }
        
        public void GetFacilityTotalAvgCostofARVandOIPerPatientPerMonthAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, object userState) {
            if ((this.onBeginGetFacilityTotalAvgCostofARVandOIPerPatientPerMonthDelegate == null)) {
                this.onBeginGetFacilityTotalAvgCostofARVandOIPerPatientPerMonthDelegate = new BeginOperationDelegate(this.OnBeginGetFacilityTotalAvgCostofARVandOIPerPatientPerMonth);
            }
            if ((this.onEndGetFacilityTotalAvgCostofARVandOIPerPatientPerMonthDelegate == null)) {
                this.onEndGetFacilityTotalAvgCostofARVandOIPerPatientPerMonthDelegate = new EndOperationDelegate(this.OnEndGetFacilityTotalAvgCostofARVandOIPerPatientPerMonth);
            }
            if ((this.onGetFacilityTotalAvgCostofARVandOIPerPatientPerMonthCompletedDelegate == null)) {
                this.onGetFacilityTotalAvgCostofARVandOIPerPatientPerMonthCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacilityTotalAvgCostofARVandOIPerPatientPerMonthCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacilityTotalAvgCostofARVandOIPerPatientPerMonthDelegate, new object[] {
                        TransactionStartDate,
                        TransactionEndDate}, this.onEndGetFacilityTotalAvgCostofARVandOIPerPatientPerMonthDelegate, this.onGetFacilityTotalAvgCostofARVandOIPerPatientPerMonthCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.BeginGetFacilityCumulAvgCostofARVandOIPerPatientPerMonth(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFacilityCumulAvgCostofARVandOIPerPatientPerMonth(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Facility.Reports.FacilityReportsService.ArrayOfXElement Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.EndGetFacilityCumulAvgCostofARVandOIPerPatientPerMonth(System.IAsyncResult result) {
            return base.Channel.EndGetFacilityCumulAvgCostofARVandOIPerPatientPerMonth(result);
        }
        
        private System.IAsyncResult OnBeginGetFacilityCumulAvgCostofARVandOIPerPatientPerMonth(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime TransactionStartDate = ((System.DateTime)(inValues[0]));
            System.DateTime TransactionEndDate = ((System.DateTime)(inValues[1]));
            return ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).BeginGetFacilityCumulAvgCostofARVandOIPerPatientPerMonth(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        private object[] OnEndGetFacilityCumulAvgCostofARVandOIPerPatientPerMonth(System.IAsyncResult result) {
            Facility.Reports.FacilityReportsService.ArrayOfXElement retVal = ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).EndGetFacilityCumulAvgCostofARVandOIPerPatientPerMonth(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacilityCumulAvgCostofARVandOIPerPatientPerMonthCompleted(object state) {
            if ((this.GetFacilityCumulAvgCostofARVandOIPerPatientPerMonthCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacilityCumulAvgCostofARVandOIPerPatientPerMonthCompleted(this, new GetFacilityCumulAvgCostofARVandOIPerPatientPerMonthCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacilityCumulAvgCostofARVandOIPerPatientPerMonthAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate) {
            this.GetFacilityCumulAvgCostofARVandOIPerPatientPerMonthAsync(TransactionStartDate, TransactionEndDate, null);
        }
        
        public void GetFacilityCumulAvgCostofARVandOIPerPatientPerMonthAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, object userState) {
            if ((this.onBeginGetFacilityCumulAvgCostofARVandOIPerPatientPerMonthDelegate == null)) {
                this.onBeginGetFacilityCumulAvgCostofARVandOIPerPatientPerMonthDelegate = new BeginOperationDelegate(this.OnBeginGetFacilityCumulAvgCostofARVandOIPerPatientPerMonth);
            }
            if ((this.onEndGetFacilityCumulAvgCostofARVandOIPerPatientPerMonthDelegate == null)) {
                this.onEndGetFacilityCumulAvgCostofARVandOIPerPatientPerMonthDelegate = new EndOperationDelegate(this.OnEndGetFacilityCumulAvgCostofARVandOIPerPatientPerMonth);
            }
            if ((this.onGetFacilityCumulAvgCostofARVandOIPerPatientPerMonthCompletedDelegate == null)) {
                this.onGetFacilityCumulAvgCostofARVandOIPerPatientPerMonthCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacilityCumulAvgCostofARVandOIPerPatientPerMonthCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacilityCumulAvgCostofARVandOIPerPatientPerMonthDelegate, new object[] {
                        TransactionStartDate,
                        TransactionEndDate}, this.onEndGetFacilityCumulAvgCostofARVandOIPerPatientPerMonthDelegate, this.onGetFacilityCumulAvgCostofARVandOIPerPatientPerMonthCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.BeginGetFacilityTotalCostLostToFollowup(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFacilityTotalCostLostToFollowup(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Facility.Reports.FacilityReportsService.ArrayOfXElement Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.EndGetFacilityTotalCostLostToFollowup(System.IAsyncResult result) {
            return base.Channel.EndGetFacilityTotalCostLostToFollowup(result);
        }
        
        private System.IAsyncResult OnBeginGetFacilityTotalCostLostToFollowup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime TransactionStartDate = ((System.DateTime)(inValues[0]));
            System.DateTime TransactionEndDate = ((System.DateTime)(inValues[1]));
            return ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).BeginGetFacilityTotalCostLostToFollowup(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        private object[] OnEndGetFacilityTotalCostLostToFollowup(System.IAsyncResult result) {
            Facility.Reports.FacilityReportsService.ArrayOfXElement retVal = ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).EndGetFacilityTotalCostLostToFollowup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacilityTotalCostLostToFollowupCompleted(object state) {
            if ((this.GetFacilityTotalCostLostToFollowupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacilityTotalCostLostToFollowupCompleted(this, new GetFacilityTotalCostLostToFollowupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacilityTotalCostLostToFollowupAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate) {
            this.GetFacilityTotalCostLostToFollowupAsync(TransactionStartDate, TransactionEndDate, null);
        }
        
        public void GetFacilityTotalCostLostToFollowupAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, object userState) {
            if ((this.onBeginGetFacilityTotalCostLostToFollowupDelegate == null)) {
                this.onBeginGetFacilityTotalCostLostToFollowupDelegate = new BeginOperationDelegate(this.OnBeginGetFacilityTotalCostLostToFollowup);
            }
            if ((this.onEndGetFacilityTotalCostLostToFollowupDelegate == null)) {
                this.onEndGetFacilityTotalCostLostToFollowupDelegate = new EndOperationDelegate(this.OnEndGetFacilityTotalCostLostToFollowup);
            }
            if ((this.onGetFacilityTotalCostLostToFollowupCompletedDelegate == null)) {
                this.onGetFacilityTotalCostLostToFollowupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacilityTotalCostLostToFollowupCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacilityTotalCostLostToFollowupDelegate, new object[] {
                        TransactionStartDate,
                        TransactionEndDate}, this.onEndGetFacilityTotalCostLostToFollowupDelegate, this.onGetFacilityTotalCostLostToFollowupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.BeginGetFacilityCumTotalCostLostToFollowup(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFacilityCumTotalCostLostToFollowup(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Facility.Reports.FacilityReportsService.ArrayOfXElement Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.EndGetFacilityCumTotalCostLostToFollowup(System.IAsyncResult result) {
            return base.Channel.EndGetFacilityCumTotalCostLostToFollowup(result);
        }
        
        private System.IAsyncResult OnBeginGetFacilityCumTotalCostLostToFollowup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime TransactionStartDate = ((System.DateTime)(inValues[0]));
            System.DateTime TransactionEndDate = ((System.DateTime)(inValues[1]));
            return ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).BeginGetFacilityCumTotalCostLostToFollowup(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        private object[] OnEndGetFacilityCumTotalCostLostToFollowup(System.IAsyncResult result) {
            Facility.Reports.FacilityReportsService.ArrayOfXElement retVal = ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).EndGetFacilityCumTotalCostLostToFollowup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacilityCumTotalCostLostToFollowupCompleted(object state) {
            if ((this.GetFacilityCumTotalCostLostToFollowupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacilityCumTotalCostLostToFollowupCompleted(this, new GetFacilityCumTotalCostLostToFollowupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacilityCumTotalCostLostToFollowupAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate) {
            this.GetFacilityCumTotalCostLostToFollowupAsync(TransactionStartDate, TransactionEndDate, null);
        }
        
        public void GetFacilityCumTotalCostLostToFollowupAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, object userState) {
            if ((this.onBeginGetFacilityCumTotalCostLostToFollowupDelegate == null)) {
                this.onBeginGetFacilityCumTotalCostLostToFollowupDelegate = new BeginOperationDelegate(this.OnBeginGetFacilityCumTotalCostLostToFollowup);
            }
            if ((this.onEndGetFacilityCumTotalCostLostToFollowupDelegate == null)) {
                this.onEndGetFacilityCumTotalCostLostToFollowupDelegate = new EndOperationDelegate(this.OnEndGetFacilityCumTotalCostLostToFollowup);
            }
            if ((this.onGetFacilityCumTotalCostLostToFollowupCompletedDelegate == null)) {
                this.onGetFacilityCumTotalCostLostToFollowupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacilityCumTotalCostLostToFollowupCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacilityCumTotalCostLostToFollowupDelegate, new object[] {
                        TransactionStartDate,
                        TransactionEndDate}, this.onEndGetFacilityCumTotalCostLostToFollowupDelegate, this.onGetFacilityCumTotalCostLostToFollowupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.BeginGetFacilityAvgCostCovByProgramAndPatient(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFacilityAvgCostCovByProgramAndPatient(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Facility.Reports.FacilityReportsService.ArrayOfXElement Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.EndGetFacilityAvgCostCovByProgramAndPatient(System.IAsyncResult result) {
            return base.Channel.EndGetFacilityAvgCostCovByProgramAndPatient(result);
        }
        
        private System.IAsyncResult OnBeginGetFacilityAvgCostCovByProgramAndPatient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime TransactionStartDate = ((System.DateTime)(inValues[0]));
            System.DateTime TransactionEndDate = ((System.DateTime)(inValues[1]));
            return ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).BeginGetFacilityAvgCostCovByProgramAndPatient(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        private object[] OnEndGetFacilityAvgCostCovByProgramAndPatient(System.IAsyncResult result) {
            Facility.Reports.FacilityReportsService.ArrayOfXElement retVal = ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).EndGetFacilityAvgCostCovByProgramAndPatient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacilityAvgCostCovByProgramAndPatientCompleted(object state) {
            if ((this.GetFacilityAvgCostCovByProgramAndPatientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacilityAvgCostCovByProgramAndPatientCompleted(this, new GetFacilityAvgCostCovByProgramAndPatientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacilityAvgCostCovByProgramAndPatientAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate) {
            this.GetFacilityAvgCostCovByProgramAndPatientAsync(TransactionStartDate, TransactionEndDate, null);
        }
        
        public void GetFacilityAvgCostCovByProgramAndPatientAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, object userState) {
            if ((this.onBeginGetFacilityAvgCostCovByProgramAndPatientDelegate == null)) {
                this.onBeginGetFacilityAvgCostCovByProgramAndPatientDelegate = new BeginOperationDelegate(this.OnBeginGetFacilityAvgCostCovByProgramAndPatient);
            }
            if ((this.onEndGetFacilityAvgCostCovByProgramAndPatientDelegate == null)) {
                this.onEndGetFacilityAvgCostCovByProgramAndPatientDelegate = new EndOperationDelegate(this.OnEndGetFacilityAvgCostCovByProgramAndPatient);
            }
            if ((this.onGetFacilityAvgCostCovByProgramAndPatientCompletedDelegate == null)) {
                this.onGetFacilityAvgCostCovByProgramAndPatientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacilityAvgCostCovByProgramAndPatientCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacilityAvgCostCovByProgramAndPatientDelegate, new object[] {
                        TransactionStartDate,
                        TransactionEndDate}, this.onEndGetFacilityAvgCostCovByProgramAndPatientDelegate, this.onGetFacilityAvgCostCovByProgramAndPatientCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.BeginGetFacilityCumCostCovByProgramAndPatient(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFacilityCumCostCovByProgramAndPatient(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Facility.Reports.FacilityReportsService.ArrayOfXElement Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.EndGetFacilityCumCostCovByProgramAndPatient(System.IAsyncResult result) {
            return base.Channel.EndGetFacilityCumCostCovByProgramAndPatient(result);
        }
        
        private System.IAsyncResult OnBeginGetFacilityCumCostCovByProgramAndPatient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime TransactionStartDate = ((System.DateTime)(inValues[0]));
            System.DateTime TransactionEndDate = ((System.DateTime)(inValues[1]));
            return ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).BeginGetFacilityCumCostCovByProgramAndPatient(TransactionStartDate, TransactionEndDate, callback, asyncState);
        }
        
        private object[] OnEndGetFacilityCumCostCovByProgramAndPatient(System.IAsyncResult result) {
            Facility.Reports.FacilityReportsService.ArrayOfXElement retVal = ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).EndGetFacilityCumCostCovByProgramAndPatient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFacilityCumCostCovByProgramAndPatientCompleted(object state) {
            if ((this.GetFacilityCumCostCovByProgramAndPatientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFacilityCumCostCovByProgramAndPatientCompleted(this, new GetFacilityCumCostCovByProgramAndPatientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFacilityCumCostCovByProgramAndPatientAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate) {
            this.GetFacilityCumCostCovByProgramAndPatientAsync(TransactionStartDate, TransactionEndDate, null);
        }
        
        public void GetFacilityCumCostCovByProgramAndPatientAsync(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, object userState) {
            if ((this.onBeginGetFacilityCumCostCovByProgramAndPatientDelegate == null)) {
                this.onBeginGetFacilityCumCostCovByProgramAndPatientDelegate = new BeginOperationDelegate(this.OnBeginGetFacilityCumCostCovByProgramAndPatient);
            }
            if ((this.onEndGetFacilityCumCostCovByProgramAndPatientDelegate == null)) {
                this.onEndGetFacilityCumCostCovByProgramAndPatientDelegate = new EndOperationDelegate(this.OnEndGetFacilityCumCostCovByProgramAndPatient);
            }
            if ((this.onGetFacilityCumCostCovByProgramAndPatientCompletedDelegate == null)) {
                this.onGetFacilityCumCostCovByProgramAndPatientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFacilityCumCostCovByProgramAndPatientCompleted);
            }
            base.InvokeAsync(this.onBeginGetFacilityCumCostCovByProgramAndPatientDelegate, new object[] {
                        TransactionStartDate,
                        TransactionEndDate}, this.onEndGetFacilityCumCostCovByProgramAndPatientDelegate, this.onGetFacilityCumCostCovByProgramAndPatientCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.BeginGetPatientDebitNoteTotalCostByMonth(int PatientId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPatientDebitNoteTotalCostByMonth(PatientId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Facility.Reports.FacilityReportsService.ArrayOfXElement Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap.EndGetPatientDebitNoteTotalCostByMonth(System.IAsyncResult result) {
            return base.Channel.EndGetPatientDebitNoteTotalCostByMonth(result);
        }
        
        private System.IAsyncResult OnBeginGetPatientDebitNoteTotalCostByMonth(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int PatientId = ((int)(inValues[0]));
            return ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).BeginGetPatientDebitNoteTotalCostByMonth(PatientId, callback, asyncState);
        }
        
        private object[] OnEndGetPatientDebitNoteTotalCostByMonth(System.IAsyncResult result) {
            Facility.Reports.FacilityReportsService.ArrayOfXElement retVal = ((Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap)(this)).EndGetPatientDebitNoteTotalCostByMonth(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPatientDebitNoteTotalCostByMonthCompleted(object state) {
            if ((this.GetPatientDebitNoteTotalCostByMonthCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPatientDebitNoteTotalCostByMonthCompleted(this, new GetPatientDebitNoteTotalCostByMonthCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPatientDebitNoteTotalCostByMonthAsync(int PatientId) {
            this.GetPatientDebitNoteTotalCostByMonthAsync(PatientId, null);
        }
        
        public void GetPatientDebitNoteTotalCostByMonthAsync(int PatientId, object userState) {
            if ((this.onBeginGetPatientDebitNoteTotalCostByMonthDelegate == null)) {
                this.onBeginGetPatientDebitNoteTotalCostByMonthDelegate = new BeginOperationDelegate(this.OnBeginGetPatientDebitNoteTotalCostByMonth);
            }
            if ((this.onEndGetPatientDebitNoteTotalCostByMonthDelegate == null)) {
                this.onEndGetPatientDebitNoteTotalCostByMonthDelegate = new EndOperationDelegate(this.OnEndGetPatientDebitNoteTotalCostByMonth);
            }
            if ((this.onGetPatientDebitNoteTotalCostByMonthCompletedDelegate == null)) {
                this.onGetPatientDebitNoteTotalCostByMonthCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPatientDebitNoteTotalCostByMonthCompleted);
            }
            base.InvokeAsync(this.onBeginGetPatientDebitNoteTotalCostByMonthDelegate, new object[] {
                        PatientId}, this.onEndGetPatientDebitNoteTotalCostByMonthDelegate, this.onGetPatientDebitNoteTotalCostByMonthCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap CreateChannel() {
            return new FacilityReportsServiceSoapClientChannel(this);
        }
        
        private class FacilityReportsServiceSoapClientChannel : ChannelBase<Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap>, Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap {
            
            public FacilityReportsServiceSoapClientChannel(System.ServiceModel.ClientBase<Facility.Reports.FacilityReportsService.FacilityReportsServiceSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetFacilityPatientsCostPerMonth(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = TransactionStartDate;
                _args[1] = TransactionEndDate;
                System.IAsyncResult _result = base.BeginInvoke("GetFacilityPatientsCostPerMonth", _args, callback, asyncState);
                return _result;
            }
            
            public Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityPatientsCostPerMonth(System.IAsyncResult result) {
                object[] _args = new object[0];
                Facility.Reports.FacilityReportsService.ArrayOfXElement _result = ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(base.EndInvoke("GetFacilityPatientsCostPerMonth", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFacilityAvgCD4CostPerPatient(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = TransactionStartDate;
                _args[1] = TransactionEndDate;
                System.IAsyncResult _result = base.BeginInvoke("GetFacilityAvgCD4CostPerPatient", _args, callback, asyncState);
                return _result;
            }
            
            public Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityAvgCD4CostPerPatient(System.IAsyncResult result) {
                object[] _args = new object[0];
                Facility.Reports.FacilityReportsService.ArrayOfXElement _result = ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(base.EndInvoke("GetFacilityAvgCD4CostPerPatient", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFacilityAvgExcludingCD4CostPerPatient(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = TransactionStartDate;
                _args[1] = TransactionEndDate;
                System.IAsyncResult _result = base.BeginInvoke("GetFacilityAvgExcludingCD4CostPerPatient", _args, callback, asyncState);
                return _result;
            }
            
            public Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityAvgExcludingCD4CostPerPatient(System.IAsyncResult result) {
                object[] _args = new object[0];
                Facility.Reports.FacilityReportsService.ArrayOfXElement _result = ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(base.EndInvoke("GetFacilityAvgExcludingCD4CostPerPatient", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFacilityTotalAvgCostofARVandOIPerPatientPerMonth(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = TransactionStartDate;
                _args[1] = TransactionEndDate;
                System.IAsyncResult _result = base.BeginInvoke("GetFacilityTotalAvgCostofARVandOIPerPatientPerMonth", _args, callback, asyncState);
                return _result;
            }
            
            public Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityTotalAvgCostofARVandOIPerPatientPerMonth(System.IAsyncResult result) {
                object[] _args = new object[0];
                Facility.Reports.FacilityReportsService.ArrayOfXElement _result = ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(base.EndInvoke("GetFacilityTotalAvgCostofARVandOIPerPatientPerMonth", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFacilityCumulAvgCostofARVandOIPerPatientPerMonth(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = TransactionStartDate;
                _args[1] = TransactionEndDate;
                System.IAsyncResult _result = base.BeginInvoke("GetFacilityCumulAvgCostofARVandOIPerPatientPerMonth", _args, callback, asyncState);
                return _result;
            }
            
            public Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityCumulAvgCostofARVandOIPerPatientPerMonth(System.IAsyncResult result) {
                object[] _args = new object[0];
                Facility.Reports.FacilityReportsService.ArrayOfXElement _result = ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(base.EndInvoke("GetFacilityCumulAvgCostofARVandOIPerPatientPerMonth", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFacilityTotalCostLostToFollowup(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = TransactionStartDate;
                _args[1] = TransactionEndDate;
                System.IAsyncResult _result = base.BeginInvoke("GetFacilityTotalCostLostToFollowup", _args, callback, asyncState);
                return _result;
            }
            
            public Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityTotalCostLostToFollowup(System.IAsyncResult result) {
                object[] _args = new object[0];
                Facility.Reports.FacilityReportsService.ArrayOfXElement _result = ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(base.EndInvoke("GetFacilityTotalCostLostToFollowup", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFacilityCumTotalCostLostToFollowup(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = TransactionStartDate;
                _args[1] = TransactionEndDate;
                System.IAsyncResult _result = base.BeginInvoke("GetFacilityCumTotalCostLostToFollowup", _args, callback, asyncState);
                return _result;
            }
            
            public Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityCumTotalCostLostToFollowup(System.IAsyncResult result) {
                object[] _args = new object[0];
                Facility.Reports.FacilityReportsService.ArrayOfXElement _result = ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(base.EndInvoke("GetFacilityCumTotalCostLostToFollowup", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFacilityAvgCostCovByProgramAndPatient(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = TransactionStartDate;
                _args[1] = TransactionEndDate;
                System.IAsyncResult _result = base.BeginInvoke("GetFacilityAvgCostCovByProgramAndPatient", _args, callback, asyncState);
                return _result;
            }
            
            public Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityAvgCostCovByProgramAndPatient(System.IAsyncResult result) {
                object[] _args = new object[0];
                Facility.Reports.FacilityReportsService.ArrayOfXElement _result = ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(base.EndInvoke("GetFacilityAvgCostCovByProgramAndPatient", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFacilityCumCostCovByProgramAndPatient(System.DateTime TransactionStartDate, System.DateTime TransactionEndDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = TransactionStartDate;
                _args[1] = TransactionEndDate;
                System.IAsyncResult _result = base.BeginInvoke("GetFacilityCumCostCovByProgramAndPatient", _args, callback, asyncState);
                return _result;
            }
            
            public Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetFacilityCumCostCovByProgramAndPatient(System.IAsyncResult result) {
                object[] _args = new object[0];
                Facility.Reports.FacilityReportsService.ArrayOfXElement _result = ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(base.EndInvoke("GetFacilityCumCostCovByProgramAndPatient", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPatientDebitNoteTotalCostByMonth(int PatientId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = PatientId;
                System.IAsyncResult _result = base.BeginInvoke("GetPatientDebitNoteTotalCostByMonth", _args, callback, asyncState);
                return _result;
            }
            
            public Facility.Reports.FacilityReportsService.ArrayOfXElement EndGetPatientDebitNoteTotalCostByMonth(System.IAsyncResult result) {
                object[] _args = new object[0];
                Facility.Reports.FacilityReportsService.ArrayOfXElement _result = ((Facility.Reports.FacilityReportsService.ArrayOfXElement)(base.EndInvoke("GetPatientDebitNoteTotalCostByMonth", _args, result)));
                return _result;
            }
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Silverlight.ServiceReference", "3.0.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement() {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes {
            get {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema() {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer) {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader) {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            ) {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element)) {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else {
                    reader.Skip();
                }
            }
        }
    }
}
